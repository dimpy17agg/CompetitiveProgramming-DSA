/*
Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.

Example 1:

Input:
9 3
1 2 3 1 4 5 2 3 6

Output: 
3 3 4 5 5 5 6 

Explanation: 
1st contiguous subarray = {1 2 3} Max = 3
2nd contiguous subarray = {2 3 1} Max = 3
3rd contiguous subarray = {3 1 4} Max = 4
4th contiguous subarray = {1 4 5} Max = 5
5th contiguous subarray = {4 5 2} Max = 5
6th contiguous subarray = {5 2 3} Max = 5
7th contiguous subarray = {2 3 6} Max = 6

*/


static ArrayList <Integer> max_of_subarrays(int arr[], int n, int k)
    {
        // Your code here
        ArrayDeque<Integer> dq=new ArrayDeque<Integer>();
        
        ArrayList<Integer> l=new ArrayList<Integer>();
        
        for(int i=0;i<k;i++){
            while(!dq.isEmpty() && (arr[i]>=arr[dq.peekLast()]) ){
                dq.removeLast();
            }
            dq.addLast(i);
        }
        
        for(int i=k;i<n;i++){
          l.add(arr[dq.getFirst()]);
          while(!dq.isEmpty() && dq.peek()<=i-k){
              dq.removeFirst();
          }
              while(!dq.isEmpty() && arr[i]>=arr[dq.getLast()]){
                  dq.removeLast();
              }
              dq.addLast(i);
        }
        
        l.add(arr[dq.peek()]);
        //System.out.println("Its Correct output is:");
        //System.out.println("1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 1998 ");
        return l;
    }
